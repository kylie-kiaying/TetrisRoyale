# name: Microservices Tests

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         service: [
#           'auth-service',
#           'player-service', 
#           'tournament-service',
#           'matchmaking-service'
#         ]

#     steps:
#     - uses: actions/checkout@v3

#     - name: Set up Python 3.12
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.12'
        
#     - name: Install dependencies for ${{ matrix.service }}
#       working-directory: ./backend/${{ matrix.service }}
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#         pip install aiosqlite
        
#     - name: Run tests for ${{ matrix.service }}
#       working-directory: ./backend/${{ matrix.service }}
#       env:
#         TESTING: "true"
#         PLAYER_SERVICE_URL: http://localhost:8002
#         RATING_SERVICE_URL: http://localhost:8005
#         from_email: ${{ secrets.FROM_EMAIL }}
#         from_password: ${{ secrets.FROM_PASSWORD }}
#       run: |
#         pytest tests/ -v

#     - name: Upload test results
#       if: always()
#       uses: actions/upload-artifact@v3
#       with:
#         name: test-results-${{ matrix.service }}
#         path: ./backend/${{ matrix.service }}/test-results

name: Deploy to Amazon ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       service: [
  #         'auth-service',
  #         'player-service', 
  #         'tournament-service',
  #         'matchmaking-service',
  #         'rating-service',
  #         'admin-service',
  #         'analytics-service'
  #       ]
  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.12'
        
  #   - name: Run tests
  #     working-directory: ./backend/${{ matrix.service }}
  #     run: |
  #       pip install -r requirements.txt
  #       pytest tests/ -v

  deploy:
    # needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push images to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        for service in auth-service player-service tournament-service matchmaking-service rating-service admin-service analytics-service; do
          cd backend/$service
          
          # Build and tag the image
          docker build -t $ECR_REGISTRY/$service:$GITHUB_SHA .
          docker tag $ECR_REGISTRY/$service:$GITHUB_SHA $ECR_REGISTRY/$service:latest
          
          # Push the image
          docker push $ECR_REGISTRY/$service:$GITHUB_SHA
          docker push $ECR_REGISTRY/$service:latest
          
          cd ../..
        done

    - name: Update ECS services
      run: |
        for service in auth-service player-service tournament-service matchmaking-service rating-service admin-service analytics-service; do
          aws ecs update-service --cluster CS203-TetriTracker --service $service --force-new-deployment
        done