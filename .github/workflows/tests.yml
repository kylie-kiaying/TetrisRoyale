name: Build, Test, and Push to ECR

on:
  push:
    branches:
      - "**"  # Matches any branch (the correct way to specify all branches)
  pull_request:
    branches:
      - "**" 

env:
  AWS_REGION: ap-southeast-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, test, and push images to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@database-cs203.c186q28q8coh.ap-southeast-1.rds.amazonaws.com:5432/database-cs203
        ANALYTICS_SERVICE_URL: http://analytics-service:8000
      run: |
        services=("auth-service" "player-service" "tournament-service" "matchmaking-service" "rating-service" "admin-service" "analytics-service")
        
        for service in "${services[@]}"; do
          echo "Processing $service"
          
          cd backend/$service || exit 1
          
          echo "Installing dependencies for $service"
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          else
            echo "No requirements.txt found for $service"
          fi
          
          echo "Running tests for $service"
          # Check if service has a specific test structure
          if [ "$service" == "rating-service" ]; then
            pytest app/controller -v || exit 1  # Run tests on controller component
          else
            pytest tests/ -v || exit 1  # Run tests on the general tests directory
          fi
          
          echo "Building image for $service"
          docker build -t "$ECR_REGISTRY/$service:$GITHUB_SHA" .
          docker tag "$ECR_REGISTRY/$service:$GITHUB_SHA" "$ECR_REGISTRY/$service:latest"
          
          echo "Pushing image for $service"
          docker push "$ECR_REGISTRY/$service:$GITHUB_SHA"
          docker push "$ECR_REGISTRY/$service:latest"
          
          cd ../..
        done
