name: Deploy to Amazon ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push images to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        for service in auth-service player-service tournament-service matchmaking-service rating-service admin-service analytics-service; do
          cd backend/$service
          
          # Build and tag the image
          docker build -t $ECR_REGISTRY/$service:$GITHUB_SHA .
          docker tag $ECR_REGISTRY/$service:$GITHUB_SHA $ECR_REGISTRY/$service:latest
          
          # Push the image
          docker push $ECR_REGISTRY/$service:$GITHUB_SHA
          docker push $ECR_REGISTRY/$service:latest
          
          cd ../..
        done

    - name: Create CodeDeploy Deployments
      run: |
        for service in auth-service player-service tournament-service matchmaking-service rating-service admin-service analytics-service; do
          aws deploy create-deployment \
            --application-name CS203-TetriTracker-$service \
            --deployment-group-name CS203-TetriTracker-$service-deployment-group \
            --revision '{
              "revisionType": "AppSpecContent",
              "appSpecContent": {
                "content": "{\"version\":1,\"Resources\":[{\"TargetService\":{\"Type\":\"AWS::ECS::Service\",\"Properties\":{\"TaskDefinition\":\"'$service':$GITHUB_SHA'\",\"LoadBalancerInfo\":{\"ContainerName\":\"'$service'\",\"ContainerPort\":8000}}}}]}"
              }
            }'
        done